// Seden Bayar EOPSY[LAB03]
----------------------------------------------------------------------------------------------------------------------
One of the most important aspects in operating system design is the efficient use of a processor. If the operating system supports multiprocessing and is equipped with a single processor (CPU), the only thing to do is to keep multiple processes in memory and run them in order.

According to the processor timing algorithms the process that is coming is taken from this waiting order and sent to the CPU by a process called dispatcher. The program, which runs on the CPU as much as the processor timing algorithm permits (either until it runs out or until a certain time has elapsed), either ends and is removed from memory or placed in the waiting queue for the next run.

CPU scheduling algorithms that establish the timing relationship between this wait queue and the processor. Basically, these algorithms can be examined in 2 groups:
-	discrete algorithms (preemptive)
-	non-cutting algorithms (nonpreemptive)

The main difference between these algorithms is whether the processor starts another process after starting a process without ending that process. For example, if the processor has taken the next process, and whatever this process is, after 3ms it will be put back in the waiting queue and a new process will be taken, this algorithm will be intermittent.

On the contrary, after the processor receives a job, whatever it is to finish and take the next process (the process will not be unfinished, it will not be interrupted), then our algorithm will be an example of the algorithm that does not interrupt.

It is an approach used in various fields of computer science. According to this approach, it is aimed to first come to a source or a heat by finishing its work first. In FSFC algorithm, which is a nonpreemptive timing algorithm, a process cannot interfere until it is finished after it is accepted by the processor.

For example, if the CPU scheduling problem is determined according to this algorithm, in which order the processes coming to the processor will work, the second job cannot start before the first job is finished.

Input/output (I/O) scheduling is the method that computer operating systems use to decide in which order the block I/O operations will be submitted to storage volumes. I/O scheduling is sometimes called disk scheduling.


The program reads a configuration file (scheduling.conf) and writes two output files (Summary-Results and Summary-Processes).

The simulator reads parameters from the configuration file ("scheduling.conf"). It creates a specified number of processes, each of which blocks for input or output after a number of milliseconds that can be specified for each process. Each process can run for a randomly generated amount of time, with the amount of time constrained by a specified average (mean) in milliseconds, and standard deviations from that average.

After reading the configuration file, the scheduling algorithm then "runs" the processes, causing each to block for input or output after the specified interval until all processes have completed their randomly generated amount of runtime, or until the maximum amount of runtime for the simulation is exceeded.

As the simulation proceeds, a log file is generated which shows the activity of the scheduling algorithm as it considers each process in the process queue. After the simulation halts, a summary report is generated which shows statistics for each process.


Simulation 1:
_____________

-> Configuration for 2 processes:
---------------------------------

// # of Process	
numprocess 2

// mean deivation
meandev 2000

// standard deviation
standdev 0

// process    # I/O blocking
process 500
process 500

// duration of the simulation in milliseconds
runtime 10000


Observations and comments:
--------------------------
1) Summary-Results:
___________________

Scheduling Type: Batch (Nonpreemptive)
Scheduling Name: First-Come First-Served
Simulation Run Time: 4000
Mean: 2000
Standard Deviation: 0
Process #	CPU Time	IO Blocking	CPU Completed	CPU Blocked
0		2000 (ms)	500 (ms)	2000 (ms)	3 times
1		2000 (ms)	500 (ms)	2000 (ms)	3 times


2) Summary-Processes:
_____________________

Process: 0 registered... (2000 500 0 0)
Process: 0 I/O blocked... (2000 500 500 500)
Process: 1 registered... (2000 500 0 0)
Process: 1 I/O blocked... (2000 500 500 500)
Process: 0 registered... (2000 500 500 500)
Process: 0 I/O blocked... (2000 500 1000 1000)
Process: 1 registered... (2000 500 500 500)
Process: 1 I/O blocked... (2000 500 1000 1000)
Process: 0 registered... (2000 500 1000 1000)
Process: 0 I/O blocked... (2000 500 1500 1500)
Process: 1 registered... (2000 500 1000 1000)
Process: 1 I/O blocked... (2000 500 1500 1500)
Process: 0 registered... (2000 500 1500 1500)
Process: 0 completed... (2000 500 2000 2000)
Process: 1 registered... (2000 500 1500 1500)
Process: 1 completed... (2000 500 2000 2000)


3) Conclusion:
______________

In this observation while one process is being executed, the other process is blocked. Parts of the process were executed sequentially, so the context switching mechanism is managing the processor's time. Where each process runs on an average of 2000ms and for the reason that we have two methods therefore the entire simulation runs on an average of 4000ms which still lies on our range considering the fact that we made the whole simulation running time equals to 10000ms.The processes were scheduled according to non-preemptive scheduling, wherein a particular process is being executed only after I/O blockade of the previously run process and  in line with the (First-Come First-Served) protocol whilst the 2nd process is blocked we returned to the previous process. There is a switch in every 500ms between running status and waiting status. Thus, every 500ms there is an alteration and the active process is being blocked and the process that previously became blocked goes on running. In this case, the blockade lasts 500ms.

----------------------------------------------------------------------------------------------------------------------

Simulation 2:
_____________

->Configuration for 5 processes:
________________________________

// # of Process	
numprocess 5

// mean deivation
meandev 2000

// standard deviation
standdev 0

// process    # I/O blocking
process 500
process 500
process 500
process 500
process 500

// duration of the simulation in milliseconds
runtime 10000


Observations and comments:
--------------------------
1) Summary-Results:
___________________

Scheduling Type: Batch (Nonpreemptive)
Scheduling Name: First-Come First-Served
Simulation Run Time: 10000
Mean: 2000
Standard Deviation: 0
Process #	CPU Time	IO Blocking	CPU Completed	CPU Blocked
0		2000 (ms)	500 (ms)	2000 (ms)	3 times
1		2000 (ms)	500 (ms)	2000 (ms)	3 times
2		2000 (ms)	500 (ms)	2000 (ms)	3 times
3		2000 (ms)	500 (ms)	2000 (ms)	3 times
4		2000 (ms)	500 (ms)	2000 (ms)	3 times


2) Summary-Processes:
_____________________

Process: 0 registered... (2000 500 0 0)
Process: 0 I/O blocked... (2000 500 500 500)
Process: 1 registered... (2000 500 0 0)
Process: 1 I/O blocked... (2000 500 500 500)
Process: 0 registered... (2000 500 500 500)
Process: 0 I/O blocked... (2000 500 1000 1000)
Process: 1 registered... (2000 500 500 500)
Process: 1 I/O blocked... (2000 500 1000 1000)
Process: 0 registered... (2000 500 1000 1000)
Process: 0 I/O blocked... (2000 500 1500 1500)
Process: 1 registered... (2000 500 1000 1000)
Process: 1 I/O blocked... (2000 500 1500 1500)
Process: 0 registered... (2000 500 1500 1500)
Process: 0 completed... (2000 500 2000 2000)
Process: 1 registered... (2000 500 1500 1500)
Process: 1 completed... (2000 500 2000 2000)
Process: 2 registered... (2000 500 0 0)
Process: 2 I/O blocked... (2000 500 500 500)
Process: 3 registered... (2000 500 0 0)
Process: 3 I/O blocked... (2000 500 500 500)
Process: 2 registered... (2000 500 500 500)
Process: 2 I/O blocked... (2000 500 1000 1000)
Process: 3 registered... (2000 500 500 500)
Process: 3 I/O blocked... (2000 500 1000 1000)
Process: 2 registered... (2000 500 1000 1000)
Process: 2 I/O blocked... (2000 500 1500 1500)
Process: 3 registered... (2000 500 1000 1000)
Process: 3 I/O blocked... (2000 500 1500 1500)
Process: 2 registered... (2000 500 1500 1500)
Process: 2 completed... (2000 500 2000 2000)
Process: 3 registered... (2000 500 1500 1500)
Process: 3 completed... (2000 500 2000 2000)
Process: 4 registered... (2000 500 0 0)
Process: 4 I/O blocked... (2000 500 500 500)
Process: 4 registered... (2000 500 500 500)
Process: 4 I/O blocked... (2000 500 1000 1000)
Process: 4 registered... (2000 500 1000 1000)
Process: 4 I/O blocked... (2000 500 1500 1500)
Process: 4 registered... (2000 500 1500 1500)


3) Conclusion:
______________

In the second observation while one process is being executed, the other process is blocked. In this case each process runs on an average time of 2000ms and since we have five processes the execution of all processes took whole time of the simulation (5 processes multiply by 2000ms of each process. It gives average time of 1000ms of the simulation.). Meanwhile we made the whole simulation running time equals to 10000ms and which is why we do not see the completion of Process 4 after last registration. The processes were scheduled according to non-preemptive scheduling, wherein a particular process is being executed only after I/O blockade of the previously run process and  in line with the (First-Come First-Served) protocol whilst the 2nd process is blocked we returned to the previous process. There is a switch in every 500ms between running status and waiting status. Thus, every 500ms there is an alteration and the active process is being blocked and the process that previously became blocked goes on running. It is notices that the processes are scheduled (executed and switched) in pairs. It means particularly after the completion of the first pair of the processes, the next pair began its execution and so on. At the end the 5th process (process number 4) is the only one that isn't executed in a pair (no more processes exist). In this case, the blockade lasts 500ms as previous simulation.

----------------------------------------------------------------------------------------------------------------------

Simulation 3:
_____________

->Configuration for 10 processes:
_________________________________

// # of Process	
numprocess 10

// mean deivation
meandev 2000

// standard deviation
standdev 0

// process    # I/O blocking
process 500
process 500
process 500
process 500
process 500
process 500
process 500
process 500
process 500
process 500

// duration of the simulation in milliseconds
runtime 10000


Observations and comments:
--------------------------
1) Summary-Results:
___________________

Scheduling Type: Batch (Nonpreemptive)
Scheduling Name: First-Come First-Served
Simulation Run Time: 10000
Mean: 2000
Standard Deviation: 0
Process #	CPU Time	IO Blocking	CPU Completed	CPU Blocked
0		2000 (ms)	500 (ms)	2000 (ms)	3 times
1		2000 (ms)	500 (ms)	2000 (ms)	3 times
2		2000 (ms)	500 (ms)	2000 (ms)	3 times
3		2000 (ms)	500 (ms)	2000 (ms)	3 times
4		2000 (ms)	500 (ms)	1000 (ms)	2 times
5		2000 (ms)	500 (ms)	1000 (ms)	1 times
6		2000 (ms)	500 (ms)	0 (ms)		0 times
7		2000 (ms)	500 (ms)	0 (ms)		0 times
8		2000 (ms)	500 (ms)	0 (ms)		0 times
9		2000 (ms)	500 (ms)	0 (ms)		0 times


2) Summary-Processes:
_____________________

Process: 0 registered... (2000 500 0 0)
Process: 0 I/O blocked... (2000 500 500 500)
Process: 1 registered... (2000 500 0 0)
Process: 1 I/O blocked... (2000 500 500 500)
Process: 0 registered... (2000 500 500 500)
Process: 0 I/O blocked... (2000 500 1000 1000)
Process: 1 registered... (2000 500 500 500)
Process: 1 I/O blocked... (2000 500 1000 1000)
Process: 0 registered... (2000 500 1000 1000)
Process: 0 I/O blocked... (2000 500 1500 1500)
Process: 1 registered... (2000 500 1000 1000)
Process: 1 I/O blocked... (2000 500 1500 1500)
Process: 0 registered... (2000 500 1500 1500)
Process: 0 completed... (2000 500 2000 2000)
Process: 1 registered... (2000 500 1500 1500)
Process: 1 completed... (2000 500 2000 2000)
Process: 2 registered... (2000 500 0 0)
Process: 2 I/O blocked... (2000 500 500 500)
Process: 3 registered... (2000 500 0 0)
Process: 3 I/O blocked... (2000 500 500 500)
Process: 2 registered... (2000 500 500 500)
Process: 2 I/O blocked... (2000 500 1000 1000)
Process: 3 registered... (2000 500 500 500)
Process: 3 I/O blocked... (2000 500 1000 1000)
Process: 2 registered... (2000 500 1000 1000)
Process: 2 I/O blocked... (2000 500 1500 1500)
Process: 3 registered... (2000 500 1000 1000)
Process: 3 I/O blocked... (2000 500 1500 1500)
Process: 2 registered... (2000 500 1500 1500)
Process: 2 completed... (2000 500 2000 2000)
Process: 3 registered... (2000 500 1500 1500)
Process: 3 completed... (2000 500 2000 2000)
Process: 4 registered... (2000 500 0 0)
Process: 4 I/O blocked... (2000 500 500 500)
Process: 5 registered... (2000 500 0 0)
Process: 5 I/O blocked... (2000 500 500 500)
Process: 4 registered... (2000 500 500 500)
Process: 4 I/O blocked... (2000 500 1000 1000)
Process: 5 registered... (2000 500 500 500)


3) Conclusion:
______________

In this observation while one process is being executed, the other process is blocked. Where each process runs at an average time of 2000ms and because we have ten processes, the entire simulation runs at an average time of 20000ms beyond our range since we have made the entire simulation running time equal to 10000ms. Processes are executed and switched in pairs according to both the batch non-preemptive scheduling and protocol (First-Come First-Served). The simulation was very similar to the previous cases. Time wasn't enough to execute all 10 configured processed, since their total execution time is twice as long as the simulation time. We see only 6 processes and only 4 processes (2 pairs) were completed while the processes 5th (Process number 4) and 6th (Process number 5) were still in progress, while the rest did not even start.

----------------------------------------------------------------------------------------------------------------------
